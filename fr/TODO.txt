Top priority:
-------------
* Resources to review:
 - http://www.wintellectnow.com/Videos/Watch/operating-system-support-and-debugger-concepts
 - http://www.wintellectnow.com/Videos/Watch/visual-studio-native-expression-evaluation
 - http://www.wintellectnow.com/Course/Detail/mastering-windows-debugging
 - http://www.slideshare.net/goldshtn/vs-debugging-tricks
 - http://msdn.microsoft.com/en-us/magazine/dd252945.aspx
 - http://www.codeproject.com/Articles/2943/An-introduction-to-debugging-in-MSVC-using-Pseudor
 - http://www.codeproject.com/Articles/28071/Toggle-hardware-data-read-execute-breakpoints-prog?fid=1519331&df=90&mpp=10&noise=1&prof=True&sort=Position&view=Normal&spc=Relaxed&fr=11
 - http://www.ksyash.com/2011/01/210/
 - http://www.wintellect.com/blogs/jrobbins/pdb-files-what-every-developer-must-know
 
* Improve "FindThis" project so that it really makes sense to have to find the "this" pointer.
* Ajouter projet "DebugVsRelease" et parler de /RTCs (initialisation à 0xcccccccc des données + code en debug, parler des propriétés de 0xcc qui est INT 3).
* Add new "SymbolsVsNoSymbols" project to show differences between debugging sessions with and without symbols.
* Add new "x86Vsx64" project to show differences between x86 and x64 debugging.
* Lire layout changes in visual c++ by random ascii blog.
* Add two method calls to the "CallingConventions" project, one with the "__thiscall" calling convention set
explicitely and the other with no attribute, show how the __thiscall convention uses ECX to store the this 
pointer and how it's used as the default calling convention. Change one of the method calls to use __cdecl or __stdcall and show where the "this pointer is stored".
* Add a project example to illustrate how Edit & Continue works.
* Add mention of retrieving argc and argv on the stack.
* Illustrate with a source code example the additional MOV instructions that are generated by unoptimized compilation to make the watch window "work".
* NatVis.


Lesser priority:
----------------

* Add both quick help at the beginning of the presentation + help menu.
* Cover how non-primitive data types are passed to functions/methods and returned from them, where they are in memory, how to "watch" them, etc.
* Cover memory leaks hunting: http://msdn.microsoft.com/en-us/library/x98tx3cf.aspx
* Cover differences between processes spawned by the debugger and other processes: http://msdn.microsoft.com/en-us/library/ff538841.aspx
* Talk about how a debugger can be used to modify the debuggee (rewriting code, data, etc.), not only as examine it
* See in this blog series: http://blogs.msdn.com/b/vcblog/archive/2013/05/29/optimizing-c-code.aspx if there's some content worth using.
