Top priority:
-------------
* Resources to review:
 * PowerPC:
 	- http://www.altdevblogaday.com/2011/07/25/debugging-techniques-for-optimized-ppc-builds/
 	- https://www.horizonmb.com/threads/99929-PowerPC-Beginner-s-Tutorial
 	- http://www.ibm.com/developerworks/linux/library/l-powasm4/index.html
 	- http://www.ibm.com/developerworks/library/l-ppc/
 * General:
	 - _vectorcall calling convention: http://blogs.msdn.com/b/vcblog/archive/2013/07/12/introducing-vector-calling-convention.aspx
	 - http://www.plantation-productions.com/Webster/
	 - http://msdn.microsoft.com/en-us/library/h2k70f3s.aspx
	 - http://analyze-v.com/?p=468
	 - http://blogs.msdn.com/b/oldnewthing/archive/2011/03/02/10135747.aspx?Redirected=true
	 - http://blogs.msdn.com/b/ntdebugging/archive/2009/01/09/challenges-of-debugging-optimized-x64-code.aspx
	 - http://msdn.microsoft.com/en-us/magazine/cc301808.aspx
	 - http://msdn.microsoft.com/en-us/magazine/cc301805.aspx
	 - http://www.slideshare.net/goldshtn/vs-debugging-tricks
	 - http://msdn.microsoft.com/en-us/magazine/dd252945.aspx
	 - http://www.codeproject.com/Articles/2943/An-introduction-to-debugging-in-MSVC-using-Pseudor
	 - http://www.codeproject.com/Articles/28071/Toggle-hardware-data-read-execute-breakpoints-prog?fid=1519331&df=90&mpp=10&noise=1&prof=True&sort=Position&view=Normal&spc=Relaxed&fr=11
	 - http://www.ksyash.com/2011/01/210/
	 - http://www.wintellect.com/blogs/jrobbins/pdb-files-what-every-developer-must-know
	 - http://msdn.microsoft.com/en-us/magazine/cc301374.aspx
	 - http://msdn.microsoft.com/en-us/library/7kcdt6fy.aspx
	 - http://www.ray.masmcode.com/fpu.html
 
* Add a section in the presentation to talk about finding our way on the stack in debug mode, and then how to apply this knowledge to guess compiler's optimizations. 
* Disable /RTCs and /GS to make generated assembly code easier to read and illustrate in disassembly what it does. Mention this somewhere in the presentation. Mention /GS too.
* Improve "FindThis" project so that it really makes sense to have to find the "this" pointer.
* Ajouter projet "DebugVsRelease" et parler de /RTCs (initialisation à 0xcccccccc des données + code en debug, parler des propriétés de 0xcc qui est INT 3).
* "HowStackWorks": add info on where to find parameters and local variables on the stack (+ and - offset from ebp.). Show difference with release and mention FPO (more difficult) + show where to find argc and argv for the main function and how main is invoked in the same way as any other function.
* Add new "SymbolsVsNoSymbols" project to show differences between debugging sessions with and without symbols.
* Add new "x86Vsx64" project to show differences between x86 and x64 debugging.
* Lire layout changes in visual c++ by random ascii blog.
* Add two method calls to the "CallingConventions" project, one with the "__thiscall" calling convention set
explicitely and the other with no attribute, show how the __thiscall convention uses ECX to store the this 
pointer and how it's used as the default calling convention. Change one of the method calls to use __cdecl or __stdcall and show where the "this pointer is stored".
* Add mention of retrieving argc and argv on the stack.
* Illustrate with a source code example the additional MOV instructions that are generated by unoptimized compilation to make the watch window "work".
* Mention x64 vs x86 in presentation.


Lesser priority:
----------------

* Add both quick help at the beginning of the presentation + help menu.
* Cover how non-primitive data types are passed to functions/methods and returned from them, where they are in memory, how to "watch" them, etc.
* Cover memory leaks hunting: http://msdn.microsoft.com/en-us/library/x98tx3cf.aspx
* Cover differences between processes spawned by the debugger and other processes: http://msdn.microsoft.com/en-us/library/ff538841.aspx
* Talk about how a debugger can be used to modify the debuggee (rewriting code, data, etc.), not only as examine it
* See in this blog series: http://blogs.msdn.com/b/vcblog/archive/2013/05/29/optimizing-c-code.aspx if there's some content worth using.
