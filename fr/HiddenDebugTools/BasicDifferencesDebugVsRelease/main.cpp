/*
 * This project is useful to understand basic differences between code generated by typical "Debug" 
 * and "Release" configurations.
 *
 * First, compile this program in debug. Set breakpoints on all lines of code, and run the program.
 * After the first breakpoint is hit, continue through program's execution by pressing F5, and do so 
 * each time you hit a breakpoint. Observe that all breakpoints are hit, and that all variables declared 
 * within the code can be watched in the watch window.
 *
 * Second and finally, compile this program using the Release build configuration. Keep the breakpoints 
 * you set before running the Debug version, and run the program by pressing F5. Observe what happens:
 * most of the breakpoints are gone! 
 *
 * In order to understand the differences between the Debug and the Release configuration, use 
 * the disassembly window (right click anywhere in the code editor while the program is running and left 
 * click on "Go to disassembly", or press Alt + 8).
 *
 * Observe how the Release configuration generated only one instruction:
 *
 * 003B1000 33 C0                xor         eax,eax
 *
 * whereas the debug version generated assembly code that corresponds better to the code we wrote:
 *
 * 00811280 55                   push        ebp  
 * 00811281 8B EC                mov         ebp,esp  
 * 00811283 83 EC 4C             sub         esp,4Ch
 * 00811286 53                   push        ebx
 * 00811287 56                   push        esi
 * 00811288 57                   push        edi
 * 	int foo = 0;
 * 00811289 C7 45 FC 00 00 00 00 mov         dword ptr [foo],0
 *
 * 	ChangeData(foo);
 * 00811290 8D 45 FC             lea         eax,[foo]
 * 00811293 50                   push        eax
 * 00811294 E8 99 FD FF FF       call        ChangeData (0811032h)
 * 00811299 83 C4 04             add         esp,4
 *
 * 	char bar = 'A';
 * 0081129C C6 45 FB 41          mov         byte ptr [bar],41h
 * 	float baz = 0.f;
 * 008112A0 F3 0F 10 05 58 48 81 00 movss       xmm0,dword ptr ds:[814858h]
 * 008112A8 F3 0F 11 45 F4       movss       dword ptr [baz],xmm0
 *
 * 	foo = 0;
 * 008112AD C7 45 FC 00 00 00 00 mov         dword ptr [foo],0
 * 
 * 	ChangeData(foo);
 * 008112B4 8D 45 FC             lea         eax,[foo]
 * 008112B7 50                   push        eax
 * 008112B8 E8 75 FD FF FF       call        ChangeData (0811032h)
 * 008112BD 83 C4 04             add         esp,4
 *
 * 	return 0;
 * 008112C0 33 C0                xor         eax,eax
 *
 * However, the output of the program is the same in both cases, and thus the optimizer did a pretty good job
 * at generating only necessary code.
*/

void ChangeData(int& data)
{
	data = 42;
}

int main()
{
	int foo = 0;
	
	ChangeData(foo);

	char bar = 'A';
	float baz = 0.f;
	
	foo = 0;

	ChangeData(foo);

	return 0;	
}

